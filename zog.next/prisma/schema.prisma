// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PageVisit {
  id        Int      @id @default(autoincrement())
  url       String
  partnerId String
  visitorId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String          @id @default(cuid())
  name            String?
  birthday        String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  userRole        String          @default("Client")
  utm_partner     String?
  isPartner       Boolean         @default(false)
  partnerId       String?
  mainPartner     User?           @relation("Partner", fields: [partnerId], references: [id], onDelete: Cascade)
  subjectPartners User[]          @relation("Partner")
  info            PartnerInvoice?
  download_manual Boolean         @default(false)
  disable_mailing Boolean         @default(false)
  email_date      String[]        @default([])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WebHook {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String? //ключ (url) для webhook
  status    String   @default("new")
  error     String?
  method    String?
  query     Json?
  post      Json?
  headers   Json?
  cookies   Json?
  ipv4      String?
  result    Json?
}

model Lead {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String?
  pipelineId    Int
  statusId      Int
  order         Int?
  data          Json?    @default("{}")
  responsibleId String?
}

model Pipeline {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @default("Воронка")
  order     Int?
}

model PipelineStatus {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String   @default("Новый статус")
  order      Int?
  pipelineId Int
}

model Permission {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  title            String
  permissionAccess PermissionAccess[]
}

model PermissionAccess {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  permissionId String

  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  model      String
  modelId    String
}

model OrderAfterPay {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  birthdate     String?
  location      String?
  illnesses     String?
  med_files     String[]
  health_state  String?
  aims          String?
  hebits        String?
  about_photos  String?
  photos        String[]
  phone         String
  partnerId     String?
  stage         String
  supportDate   DateTime?
  type          String    @default("free")
  formid        String
  formname      String
  consultant    String?
  radio         String?
  utm_partner   String?
  email         String?
  audio_comment String    @default("")
}

model AreaOfLife {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orderAfterPayId String
  pittaFirst      Int
  pittaSecond     Int
  wataFirst       Int
  wataSecond      Int
  kaphaFirst      Int
  kaphaSecond     Int
}

model Pollution {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orderAfterPayId String
  energy          String
  value           Int
  start           Float
  end             Float
}

model PersonalTrees {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orderAfterPayId String
  trees           String[]
}

model PartnerPayment {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  partnerId    String
  partnerEmail String
  bankName     String
  cardNumber   String
  name         String
  count        Float
  saveCardInfo Boolean?
  status       String
}

model PayCardInfo {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  partnerId  String   @unique
  bankName   String
  cardNumber String
  name       String
}

model PartnerInvoice {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId   String   @unique
  totalCount  String
  balance     String
  underReview String
  approve     String
}

model PartnerInviteLink {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  partnerId String
  email     String
}

model UniqTokenForm {
  id         String  @id @default(cuid())
  token      String? @unique
  session_id String?
}

model PaymentFromSubjectPartners {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  partnerId String
  email     String
  name      String
  price     String
}

model Banners {
  id        String @id @default(cuid())
  url       String
  public_id String @default("")
  link      String @default("")
  access    String[]  @default(["All"])
  order     Int
}
model Review {
  id                    String   @id @default(cuid())
  createdAt             DateTime @default(now())
  fullName              String
  nameConsult           String
  rating                String
  likeIt                String
  offers                String
  comfort               String
  recommendation        String
  personalAboutTorsunov String
  agreement             Boolean
}

model PrimaryForm {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  name           String
  email          String
  phone          String
  timeZone       String
  messenger      String
  utm            String   @default("")
  form           String   @default("")
  status         String   @default("new")
  comment        String   @default("")
  inflammation   Json
  pressure       Json
  tumor          Json
  cardiovascular Json
  vision         Json
  joints         Json
}

model AutoLoginLink {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String
  url       String
}

model PaymentBanners {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  image_id   String
  url        String
  sum        String
  currency   String
  system     String
  successUrl String   @default("")
}

model ManualTransaction {
  id            String @id @default(cuid())
  transactionId String
  email         String
}
